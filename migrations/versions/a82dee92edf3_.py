"""empty message

Revision ID: a82dee92edf3
Revises:
Create Date: 2018-10-20 17:11:42.330813

"""
from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils
from sqlalchemy_searchable import sync_trigger


# revision identifiers, used by Alembic.
revision = "a82dee92edf3"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()

    # SQLAlchemy-Searchable
    op.execute(
        """DROP TYPE IF EXISTS tsq_state CASCADE;

        CREATE TYPE tsq_state AS (
            search_query text,
            parentheses_stack int,
            skip_for int,
            current_token text,
            current_index int,
            current_char text,
            previous_char text,
            tokens text[]
        );

        CREATE OR REPLACE FUNCTION tsq_append_current_token(state tsq_state)
        RETURNS tsq_state AS $$
        BEGIN
            IF state.current_token != '' THEN
                state.tokens := array_append(state.tokens, state.current_token);
                state.current_token := '';
            END IF;
            RETURN state;
        END;
        $$ LANGUAGE plpgsql IMMUTABLE;


        CREATE OR REPLACE FUNCTION tsq_tokenize_character(state tsq_state)
        RETURNS tsq_state AS $$
        BEGIN
            IF state.current_char = '(' THEN
                state.tokens := array_append(state.tokens, '(');
                state.parentheses_stack := state.parentheses_stack + 1;
                state := tsq_append_current_token(state);
            ELSIF state.current_char = ')' THEN
                IF (state.parentheses_stack > 0 AND state.current_token != '') THEN
                    state := tsq_append_current_token(state);
                    state.tokens := array_append(state.tokens, ')');
                    state.parentheses_stack := state.parentheses_stack - 1;
                END IF;
            ELSIF state.current_char = '"' THEN
                state.skip_for := position('"' IN substring(
                    state.search_query FROM state.current_index + 1
                ));

                IF state.skip_for > 1 THEN
                    state.tokens = array_append(
                        state.tokens,
                        substring(
                            state.search_query
                            FROM state.current_index FOR state.skip_for + 1
                        )
                    );
                ELSIF state.skip_for = 0 THEN
                    state.current_token := state.current_token || state.current_char;
                END IF;
            ELSIF (
                state.current_char = '-' AND
                (state.current_index = 1 OR state.previous_char = ' ')
            ) THEN
                state.tokens := array_append(state.tokens, '-');
            ELSIF state.current_char = ' ' THEN
                state := tsq_append_current_token(state);
                IF substring(
                    state.search_query FROM state.current_index FOR 4
                ) = ' or ' THEN
                    state.skip_for := 2;

                    -- remove duplicate OR tokens
                    IF state.tokens[array_length(state.tokens, 1)] != ' | ' THEN
                        state.tokens := array_append(state.tokens, ' | ');
                    END IF;
                END IF;
            ELSE
                state.current_token = state.current_token || state.current_char;
            END IF;
            RETURN state;
        END;
        $$ LANGUAGE plpgsql IMMUTABLE;


        CREATE OR REPLACE FUNCTION tsq_tokenize(search_query text) RETURNS text[] AS $$
        DECLARE
            state tsq_state;
        BEGIN
            SELECT
                search_query::text AS search_query,
                0::int AS parentheses_stack,
                0 AS skip_for,
                ''::text AS current_token,
                0 AS current_index,
                ''::text AS current_char,
                ''::text AS previous_char,
                '{}'::text[] AS tokens
            INTO state;

            state.search_query := lower(trim(
                regexp_replace(search_query, '""+', '""', 'g')
            ));

            FOR state.current_index IN (
                SELECT generate_series(1, length(state.search_query))
            ) LOOP
                state.current_char := substring(
                    search_query FROM state.current_index FOR 1
                );

                IF state.skip_for > 0 THEN
                    state.skip_for := state.skip_for - 1;
                    CONTINUE;
                END IF;

                state := tsq_tokenize_character(state);
                state.previous_char := state.current_char;
            END LOOP;
            state := tsq_append_current_token(state);

            state.tokens := array_nremove(state.tokens, '(', -state.parentheses_stack);

            RETURN state.tokens;
        END;
        $$ LANGUAGE plpgsql IMMUTABLE;


        -- Processes an array of text search tokens and returns a tsquery
        CREATE OR REPLACE FUNCTION tsq_process_tokens(config regconfig, tokens text[])
        RETURNS tsquery AS $$
        DECLARE
            result_query text;
            previous_value text;
            value text;
        BEGIN
            result_query := '';
            FOREACH value IN ARRAY tokens LOOP
                IF value = '"' THEN
                    CONTINUE;
                END IF;

                IF left(value, 1) = '"' AND right(value, 1) = '"' THEN
                    value := phraseto_tsquery(config, value);
                ELSIF value NOT IN ('(', ' | ', ')', '-') THEN
                    value := quote_literal(value) || ':*';
                END IF;

                IF previous_value = '-' THEN
                    IF value = '(' THEN
                        value := '!' || value;
                    ELSE
                        value := '!(' || value || ')';
                    END IF;
                END IF;

                SELECT
                    CASE
                        WHEN result_query = '' THEN value
                        WHEN (
                            previous_value IN ('!(', '(', ' | ') OR
                            value IN (')', ' | ')
                        ) THEN result_query || value
                        ELSE result_query || ' & ' || value
                    END
                INTO result_query;
                previous_value := value;
            END LOOP;

            RETURN to_tsquery(config, result_query);
        END;
        $$ LANGUAGE plpgsql IMMUTABLE;


        CREATE OR REPLACE FUNCTION tsq_process_tokens(tokens text[])
        RETURNS tsquery AS $$
            SELECT tsq_process_tokens(get_current_ts_config(), tokens);
        $$ LANGUAGE SQL IMMUTABLE;


        CREATE OR REPLACE FUNCTION tsq_parse(config regconfig, search_query text)
        RETURNS tsquery AS $$
            SELECT tsq_process_tokens(config, tsq_tokenize(search_query));
        $$ LANGUAGE SQL IMMUTABLE;


        CREATE OR REPLACE FUNCTION tsq_parse(config text, search_query text)
        RETURNS tsquery AS $$
            SELECT tsq_parse(config::regconfig, search_query);
        $$ LANGUAGE SQL IMMUTABLE;


        CREATE OR REPLACE FUNCTION tsq_parse(search_query text) RETURNS tsquery AS $$
            SELECT tsq_parse(get_current_ts_config(), search_query);
        $$ LANGUAGE SQL IMMUTABLE;


        -- remove first N elements equal to the given value from the array (array
        -- must be one-dimensional)
        --
        -- If negative value is given as the third argument the removal of elements
        -- starts from the last array element.
        CREATE OR REPLACE FUNCTION array_nremove(anyarray, anyelement, int)
        RETURNS ANYARRAY AS $$
            WITH replaced_positions AS (
                SELECT UNNEST(
                    CASE
                    WHEN $2 IS NULL THEN
                        '{}'::int[]
                    WHEN $3 > 0 THEN
                        (array_positions($1, $2))[1:$3]
                    WHEN $3 < 0 THEN
                        (array_positions($1, $2))[
                            (cardinality(array_positions($1, $2)) + $3 + 1):
                        ]
                    ELSE
                        '{}'::int[]
                    END
                ) AS position
            )
            SELECT COALESCE((
                SELECT array_agg(value)
                FROM unnest($1) WITH ORDINALITY AS t(value, index)
                WHERE index NOT IN (SELECT position FROM replaced_positions)
            ), $1[1:0]);
        $$ LANGUAGE SQL IMMUTABLE;"""
    )

    # icd10 table
    op.create_table(
        "icd10",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=True),
        sa.Column("modify_timestamp", sa.DateTime(), nullable=True),
        sa.Column("icd10", sa.Unicode(), nullable=False),
        sa.Column("description", sa.Unicode(), nullable=False),
        sa.Column(
            "search_vector",
            sqlalchemy_utils.types.ts_vector.TSVectorType(),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_index(
        "ix_icd10_search_vector",
        "icd10",
        ["search_vector"],
        unique=False,
        postgresql_using="gin",
    )
    sync_trigger(conn, "icd10", "search_vector", ["icd10", "description"])

    # patient table
    op.create_table(
        "patient",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=True),
        sa.Column("modify_timestamp", sa.DateTime(), nullable=True),
        sa.Column("hn", sa.Unicode(), nullable=False),
        sa.Column("hiv_clinic_id", sa.Unicode(), nullable=True),
        sa.Column("gov_id_type", sa.Unicode(), nullable=True),
        sa.Column("gov_id", sa.Unicode(), nullable=True),
        sa.Column("name", sa.Unicode(), nullable=True),
        sa.Column("dob", sa.Date(), nullable=True),
        sa.Column("first_encounter", sa.Date(), nullable=True),
        sa.Column("sex", sa.Unicode(), nullable=True),
        sa.Column("gender", sa.Unicode(), nullable=True),
        sa.Column("marital", sa.Unicode(), nullable=True),
        sa.Column("nationality", sa.Unicode(), nullable=True),
        sa.Column("education", sa.Unicode(), nullable=True),
        sa.Column("address", sa.Unicode(), nullable=True),
        sa.Column("tel", sa.Unicode(), nullable=True),
        sa.Column("relative_tel", sa.Unicode(), nullable=True),
        sa.Column("is_refer", sa.Unicode(), nullable=True),
        sa.Column("refer_from", sa.Unicode(), nullable=True),
        sa.Column("nap", sa.Unicode(), nullable=True),
        sa.Column("bill_payer", sa.Unicode(), nullable=True),
        sa.Column("plans", sa.Unicode(), nullable=True),
        sa.Column(
            "search_vector",
            sqlalchemy_utils.types.ts_vector.TSVectorType(),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("gov_id"),
        sa.UniqueConstraint("hiv_clinic_id"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("nap"),
    )
    op.create_index(op.f("ix_patient_hn"), "patient", ["hn"], unique=True)
    op.create_index(
        "ix_patient_search_vector",
        "patient",
        ["search_vector"],
        unique=False,
        postgresql_using="gin",
    )
    sync_trigger(
        conn,
        "patient",
        "search_vector",
        ["hn", "name", "gov_id", "nap", "refer_from"],
    )

    # user table
    op.create_table(
        "user",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=True),
        sa.Column("modify_timestamp", sa.DateTime(), nullable=True),
        sa.Column("username", sa.Unicode(), nullable=False, unique=True),
        sa.Column("password", sa.Unicode(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )

    # appointment table
    op.create_table(
        "appointment",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=True),
        sa.Column("modify_timestamp", sa.DateTime(), nullable=True),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("appointment_for", sa.Unicode(), nullable=False),
        sa.Column("paitent_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["paitent_id"], ["patient.id"]),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )

    # imaging table
    op.create_table(
        "imaging",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=True),
        sa.Column("modify_timestamp", sa.DateTime(), nullable=True),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("film_type", sa.Unicode(), nullable=True),
        sa.Column("result", sa.Unicode(), nullable=True),
        sa.Column("paitent_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["paitent_id"], ["patient.id"]),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )

    # lab table
    op.create_table(
        "lab",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=True),
        sa.Column("modify_timestamp", sa.DateTime(), nullable=True),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("anti_hiv", sa.Unicode(length=3), nullable=True),
        sa.Column("cd4", sa.Integer(), nullable=True),
        sa.Column("p_cd4", sa.Float(), nullable=True),
        sa.Column("vl", sa.Unicode(), nullable=True),
        sa.Column("hiv_resistence", sa.Unicode(), nullable=True),
        sa.Column("vdrl", sa.Unicode(length=3), nullable=True),
        sa.Column("rpr", sa.Unicode(), nullable=True),
        sa.Column("hbsag", sa.Unicode(length=3), nullable=True),
        sa.Column("anti_hbs", sa.Unicode(length=3), nullable=True),
        sa.Column("anti_hcv", sa.Unicode(length=3), nullable=True),
        sa.Column("ppd", sa.Integer(), nullable=True),
        sa.Column("afb", sa.Unicode(length=10), nullable=True),
        sa.Column("sputum_gs", sa.Unicode(), nullable=True),
        sa.Column("sputum_cs", sa.Unicode(), nullable=True),
        sa.Column("genexpert", sa.Unicode(), nullable=True),
        sa.Column("hain_test", sa.Unicode(), nullable=True),
        sa.Column("paitent_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["paitent_id"], ["patient.id"]),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )

    # visit table
    op.create_table(
        "visit",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=True),
        sa.Column("modify_timestamp", sa.DateTime(), nullable=True),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("is_art_adherence", sa.Unicode(), nullable=True),
        sa.Column("art_adherence_scale", sa.Float(), nullable=True),
        sa.Column("art_delay", sa.Float(), nullable=True),
        sa.Column("art_adherence_problem", sa.Unicode(), nullable=True),
        sa.Column("hx_contact_tb", sa.Unicode(), nullable=True),
        sa.Column("bw", sa.Float(), nullable=True),
        sa.Column("abn_pe", sa.Unicode(), nullable=True),
        sa.Column("imp", sa.Unicode(), nullable=False),
        sa.Column("arv", sa.Unicode(), nullable=True),
        sa.Column("why_switched_arv", sa.Unicode(), nullable=True),
        sa.Column("oi_prophylaxis", sa.Unicode(), nullable=True),
        sa.Column("anti_tb", sa.Unicode(), nullable=True),
        sa.Column("vaccination", sa.Unicode(), nullable=True),
        sa.Column("paitent_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["paitent_id"], ["patient.id"]),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )

    # revoked_tokens table
    op.create_table(
        "revoked_token",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("jti", sa.Unicode(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("visit")
    op.drop_table("lab")
    op.drop_table("imaging")
    op.drop_table("appointment")
    op.drop_table("user")
    op.drop_index("ix_patient_search_vector", table_name="patient")
    op.drop_index(op.f("ix_patient_hn"), table_name="patient")
    op.drop_table("patient")
    op.drop_index("ix_icd10_search_vector", table_name="icd10")
    op.drop_table("icd10")
    op.drop_table("revoked_token")
    # ### end Alembic commands ###
